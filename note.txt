*****************Commit = First Java Functional Program

  What we did?

    Printed list of no using Structured Programming approach and then using Functional programming approach


  In Functional programming 

         for each number we are calling print method, we are not calling print method directly
		b/z it will immediately  execute the code. We want to define behavior we get  a number as input.
		For defining, we use method reference.
		
		 What we are telling is?
		 Take the numbers, convert it into stream and for each element do a print 
		
		FPO1Functional::print == Method Reference
		
		
		

	-----Creating Streams using Streams of method and for Array------
		
jshell> List<Integer> numbers = List.of(12,9,13,4,6,2,4,12,15);
numbers ==> [12, 9, 13, 4, 6, 2, 4, 12, 15]

jshell> numbers.stream()
$2 ==> java.util.stream.ReferencePipeline$Head@5ef04b5  //Reference pipeline is when we use wrapper classes or CCustom classes

jshell> Stream.of(12, 9, 13, 4, 6, 2, 4, 12, 15).count() //We can create stream even directly
$3 ==> 9


jshell> Stream.of(12,9,13,4,6,2,4,12,15)
$4 ==> java.util.stream.ReferencePipeline$Head@69663380

jshell> int[] numberArray = {12,9,13,4,6,2,4,12,15};    //We can even create stream of an Array
numberArray ==> int[9] { 12, 9, 13, 4, 6, 2, 4, 12, 15 }

jshell> Arrays.stream(numberArray)
$6 ==> java.util.stream.IntPipeline$Head@28c97a5 //Int pipeline when we use primitive int values 

jshell> Arrays.stream(numberArray).sum()
$7 ==> 77


  Creating Strams for first 10 Numbers, Square of Numbers and more-------------------
  
jshell> IntStream.range(1,10)  //This will create stream  from range 1 to 10
$1 ==> java.util.stream.IntPipeline$Head@5ef04b5

jshell> IntStream.range(1,10).sum()  //Last digit ..i.e.. 10 is not included in the sum
$2 ==> 45

jshell> IntStream.rangeClosed(1,10).sum()  //This will include last digit also in same operation
$3 ==> 55

jshell> IntStream.iterate(1, e-> e +2).limit(10).sum() //This will make stream starting from 1 and will add 2 to that till limit 10 is reached 
$4 ==> 100                                             //after that will do sum of each one of them

jshell> IntStream.iterate(1, e-> e +2).limit(10).peek(System.out::println).sum()
1                  ////This will make and print  stream starting from 1 and will add 2 to that till limit 10 is reached 
3                   // and will do sum of each one of them at end
5
7
9
11
13
15
17
19
$5 ==> 100

jshell> IntStream.iterate(2, e-> e+2).limit(10).peek(System.out::println).sum()
2
4
6
8
10
12
14
16
18
20
$6 ==> 110

jshell> IntStream.iterate(2, e-> e*2).limit(10).peek(System.out::println).sum()
2
4
8
16
32
64
128
256
512
1024
$7 ==> 2046

jshell> IntStream.iterate(2, e-> e*2).limit(10).boxed().collect(Collectors.toList()) //
$8 ==> [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024] //It will make a list of values from 2 each time multiplies by 2
//We use boxed() values we have in stream is primitive we need to box them in wrapper class